import base64
# AES constants
Nb = 4  # block size in 32-bit words
Nk = 4  # key size in 32-bit words (128 bits)
Nr = 10  # number of rounds

# AES S-box (partial, for full implementation use the complete S-box)
s_box = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Rcon (round constant)
r_con = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

# Padding
def pad(plaintext):
    pad_len = 16 - len(plaintext) % 16
    return plaintext + chr(pad_len) * pad_len

# Core AES operations
def sub_bytes(state):
    return [[s_box[b] for b in row] for row in state]

def shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]
    return state

def xtime(a):
    return (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

def mix_single_column(a):
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)
    return a

def mix_columns(state):
    for i in range(4):
        col = [state[j][i] for j in range(4)]
        col = mix_single_column(col)
        for j in range(4):
            state[j][i] = col[j]
    return state

def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]
    return state

def key_expansion(key):
    key_symbols = [ord(symbol) for symbol in key]
    key_schedule = [[0] * 4 for _ in range(4 * (Nr + 1))]
    for r in range(Nk):
        for c in range(4):
            key_schedule[r][c] = key_symbols[r * 4 + c]
    for r in range(Nk, Nb * (Nr + 1)):
        temp = key_schedule[r - 1][:]
        if r % Nk == 0:
            temp = [s_box[b] for b in temp[1:] + temp[:1]]
            temp[0] ^= r_con[r // Nk]
        for c in range(4):
            key_schedule[r][c] ^= key_schedule[r - Nk][c]
    round_keys = []
    for r in range(0, len(key_schedule), 4):
        round_keys.append([key_schedule[r], key_schedule[r + 1], key_schedule[r + 2], key_schedule[r + 3]])
    return round_keys

def text_to_matrix(text):
    matrix = []
    for i in range(0, len(text), 4):
        matrix.append([ord(text[i]), ord(text[i+1]), ord(text[i+2]), ord(text[i+3])])
    return matrix

def aes_encrypt_block(block, round_keys):
    state = text_to_matrix(block)
    state = add_round_key(state, round_keys[0])
    for i in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[i])
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[Nr])
    return ''.join(chr(state[i][j]) for j in range(4) for i in range(4))


def aes_encrypt_long(plaintext, key):
    plaintext = pad(plaintext)
    round_keys = key_expansion(key)
    ciphertext = ''
    for i in range(0, len(plaintext), 16):
        block = plaintext[i:i+16]
        ciphertext += aes_encrypt_block(block, round_keys)
    # Convert string to bytes, then base64 encode
    encrypted_bytes = ciphertext.encode('latin1')  # latin1 maps 0â€“255 directly
    return base64.b64encode(encrypted_bytes).decode()


plaintext = "This is a secret message "
key = "This is my key123"  # Must be 16 chars (128-bit key)

ciphertext = aes_encrypt_long(plaintext, key)
print("Encrypted:", ciphertext)

